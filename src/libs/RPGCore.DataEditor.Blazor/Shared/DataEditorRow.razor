@if (KeyToken != null)
{
	if (Replaceable.Value is EditorObject editorObject)
	{
		var uiFeature = KeyToken.Features.GetOrCreateFeature<EditorUIFeature>();

		<div class="row editor-row">
			<label class="col-6"><input type="checkbox" @bind="uiFeature.IsExpanded" /> @Name</label>
		</div>

		@if (uiFeature.IsExpanded)
		{
			<div class="row editor-expand">
				<div>
				</div>
				<div class="col-12">
					@foreach (var field in editorObject.Fields)
					{
						<DataEditorRow KeyToken="field" Name="@field.Name" Value="field.Value" />
					}
				</div>
			</div>
		}
	}
	else if (Replaceable.Value is EditorList editorList)
	{
		var uiFeature = KeyToken.Features.GetOrCreateFeature<EditorUIFeature>();

		<div class="row editor-row">
			<label><input type="checkbox" @bind="uiFeature.IsExpanded" /> @Name</label>
			<div></div>
		</div>

		if (uiFeature.IsExpanded)
		{
			int index = 0;

			<div class="row editor-expand">
				<div>
				</div>
				<div class="col-12">
					<div class="row editor-row">
						<label class="col-6">Length</label>
						<input class="col-6" type="number" @bind="editorList.Length" />
					</div>

					@foreach (var element in editorList.Elements)
					{
						<DataEditorRow KeyToken="element" Name="@($"[{index}]")" Value="element" />
						index++;
					}
				</div>
			</div>
		}
	}
	else if (Replaceable.Value is EditorDictionary editorDictionary)
	{
		foreach (var kvp in editorDictionary.KeyValuePairs)
		{
			<div class="row editor-row">
				<label class="col-6">@kvp.Key</label>
				<DataEditorValue Value="kvp.Value" />
			</div>
		}
	}
	else if (Replaceable.Value is EditorScalarValue<bool> boolValue)
	{
		<div class="row editor-row">
			<label class="col-6">@Name</label>
			<input class="col-6" type="checkbox" @bind="boolValue.Value" />
		</div>
	}
	else if (Replaceable.Value is EditorScalarValue<string> stringValue)
	{
		<div class="row editor-row">
			<label class="col-6">@Name</label>
			<input class="col-6" type="text" @bind="@stringValue.Value" />
		</div>
	}
	else if (Replaceable.Value is EditorScalarValue<int> intValue)
	{
		<div class="row editor-row">
			<label class="col-6">@Name</label>
			<input class="col-6" type="number" @bind="@intValue.Value" />
		</div>
	}
	else if (Replaceable.Value is EditorScalarValue<long> longValue)
	{
		<div class="row editor-row">
			<label class="col-6">@Name</label>
			<input class="col-6" type="number" @bind="@longValue.Value" />
		</div>
	}
	else
	{
		<div class="row editor-row">
			<label class="col-6">@Name</label>
			<div class="col-6">Unknown Type @Replaceable</div>
		</div>
	}
}


@code {
	[Parameter]
	public string? Name { get; set; }

	[Parameter]
	public IEditorToken? KeyToken { get; set; }

	[Parameter]
	public EditorReplaceable? Replaceable { get; set; }
}
